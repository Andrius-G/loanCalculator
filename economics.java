/* autogenerated by Processing revision 1296 on 2025-05-07 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import Colourful.*;
import Loans.*;

import processing.core.PApplet;
import processing.core.PImage;
import Colourful.*;
import Loans.*;
import javax.swing.*;
import javax.swing.filechooser.*;
import java.io.FileWriter;
import java.awt.*;
import java.util.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

////////////////////////////////////////////////
// Linear and Annuity Mortgage Calculator App //
// Author: Andrius Gasiukeviƒçius              //
////////////////////////////////////////////////










public class economics extends PApplet
{
  String path; /////////////////////// #Debug1 //////////////////////////
  PImage background;
  boolean haveReleasedKey=false;
  int lastKeyReleased=0;
  public int SCALE=2;
  public boolean debugMode=true;
  public void resizePoint(PImage img16, int scaleX, int scaleY) /////////////////////// #resize //////////////////////////
  {
    int resizeW = img16.width * scaleX;
    int resizeH = img16.height * scaleY;
    
    int imgW = img16.width;
    //int imgH = img16.height;
    
    img16.loadPixels();
    int[] oldPixels = img16.pixels;
    
    PImage resizedIMG = createImage(resizeW,resizeH,ARGB);
    
    resizedIMG.loadPixels();
    
    for(int i=0; i<resizeH; ++i)
      for(int j=0; j<resizeW; ++j)
        resizedIMG.pixels[i*resizeW+j] = oldPixels[(int)(((i/scaleY)*imgW)) + (int)(((j/scaleX)))];
    
    resizedIMG.updatePixels();
    
    img16.resize(resizeW,resizeH);
    
    img16.copy(resizedIMG,0,0,resizeW,resizeH,0,0,resizeW,resizeH);
  }
  ArrayList<StaticUIComponent>allUI;
  class StaticUIComponent /////////////////////// #StaticUIComponent #Sprite #Base //////////////////////////
  {
    int x;
    int y;
    int W;
    int H;
    Colour colour;
    Colour border;
    Boolean isActive;
    Boolean clickable;
    Boolean clicked=false;
    StaticUIComponent(int x, int y, int W, int H)
    {
      this.x=x;
      this.y=y;
      this.W=W;
      this.H=H;
      this.border = new Colour("black");
      this.colour = new Colour(0,0,0,0);
      isActive=true;
      clickable=false;
      allUI.add(this);
    }
    public void setColour(Colour c)
    {
      colour=c;
    }
    public void setBorder(Colour c)
    {
      border=c;
    }
    public void setW(int W)
    {
      this.W=W;
    }
    public void setH(int H)
    {
      this.H=H;
    }
    public void setActive(boolean state)
    {
      isActive=state;
    }
    public void click()
    {
      if(clickable&&mousePressed&&mouseX>=x&&mouseX<x+W&&mouseY>=y&&mouseY<y+H)
      {
        clicked=true;
      }
      if(clicked&&mousePressed==false)
      {
        clicked=false;
        onClick();
      }
    }
    public void onClick()
    {
      ;
    }
    public void Display()
    {
      stroke(border.R,border.G,border.B,border.alpha);
      fill(colour.R,colour.G,colour.B,colour.alpha);
      rect(x,y,W,H);
    }
  }
  class Text extends StaticUIComponent /////////////////////// #Text //////////////////////////
  {
    String text;
    int size;
    int realW;
    Colour colour; //hiding fields
    Colour border;
    Text(String text, int x, int y, int W, int H)
    {
      super(x,y,W,H);
      realW=W;
      size=12*SCALE;
      this.setText(text);
      colour = new Colour("black");
      border = new Colour(0,0,0,0);
    }
    public void setColour(Colour c)
    {
      colour=c;
    }
    public void setSize(int size)
    {
      this.size=size;
    }
    public void setText(String text)
    {
      this.text=text;
      textSize(size);
      realW=(int)textWidth(text);
    }
    @Override public  void Display()
    {
      //super.Display(); //application of hiding fields - display bounding boxes (IF UNCOMMENTED)
      textSize(size);
      fill(colour.R,colour.G,colour.B,colour.alpha);
      stroke(border.R,border.G,border.B,border.alpha);
      text(text,x,y,W,H);
    }
  }
  class StaticButton extends StaticUIComponent /////////////////////// #StaticButton //////////////////////////
  {
    PImage displayImage;
    Text displayText;
    Boolean hasImage;
    Boolean hasText;
    StaticButton(int x, int y, int W, int H)
    {
      super(x,y,W,H);
      clickable=true;
      hasImage=false;
      hasText=false;
    }
    StaticButton(String text, int x, int y, int W, int H)
    {
      super(x,y,W,H);
      clickable=true;
      displayText=new Text(text,x,y,W,H);
      displayText.setActive(false);
      hasImage=false;
      hasText=true;
      centerDisplayText();
    }
    public void setImage(String s)
    {
      displayImage=loadImage(path+"Assets/"+s);
      resizePoint(displayImage,4,4);
      hasImage=true;
    }
    public void centerDisplayText()
    {
      if(hasText==false)return;
      displayText.x=x+max(0,(W/2)-(displayText.realW/2));
      displayText.y=y+((H/2)-(displayText.size/2));
    }
    public void offsetDisplayText(int dx, int dy)
    {
      if(hasText==false)return;
      displayText.x+=dx;
      displayText.y+=dy;
    }
    public void setDisplayText(String s)
    {
      displayText = new Text(s,x,y,W,H);
      displayText.setActive(false);
      hasText=true;
      centerDisplayText();
    }
    @Override public  void Display()
    {
      if(hasImage==false)
      {
        super.Display();
      }
      else
      {
        image(displayImage,x,y,W,H);
      }
      if(hasText==true)
      {
        displayText.Display();
      }
    }
  }
  class RadioButton extends StaticButton /////////////////////// #RadioButton //////////////////////////
  {
    PImage activeImage;
    Boolean pressed=false;
    ArrayList<RadioButton>affectedButtons;
    RadioButton(int x, int y, int W, int H, ArrayList<RadioButton> aff)
    {
      super(x,y,W,H);
      setImage("circle.png");
      setActiveImage("radio_pressed.png");
      affectedButtons=aff;
    }
    RadioButton(String s, int x, int y, int W, int H, ArrayList<RadioButton> aff)
    {
      super(s,x,y,W,H);
      displayText=new Text(s,x,y,W,H);
      displayText.setActive(false);
      setImage("circle.png");
      setActiveImage("radio_pressed.png");
      offsetDisplayText(displayImage.width/8,0);
      affectedButtons=aff;
    }
    public void setActiveImage(String s)
    {
      activeImage=loadImage(path+"Assets/"+s);
      resizePoint(activeImage,4,4);
    }
    @Override public  void onClick()
    {
      for(int i=0; i<affectedButtons.size(); ++i)
      {
        affectedButtons.get(i).pressed=false;
      }
      pressed=true;
    }
    @Override public  void Display()
    {
      if(!pressed)
      {
        image(displayImage,x,y,displayImage.width/8,displayImage.height/8);
      }
      else
      {
        image(activeImage,x,y,activeImage.width/8,activeImage.height/8);
      }
      if(hasText==true)
      {
        displayText.Display();
      }
    }
  }
  class InputField extends StaticUIComponent /////////////////////// #InputField //////////////////////////
  {
    PImage displayImage;
    Text displayText;
    float input=0f;
    Text displayInput;
    Boolean hasImage;
    Boolean hasText;
    Boolean enteringText=false;
    Boolean floatPointPressed=false;
    Boolean justClicked=false;
    float powOfTen=0.1f;
    InputField(int x, int y, int W, int H)
    {
      super(x,y,W,H);
      clickable=true;
      hasImage=false;
      hasText=false;
      displayInput = new Text("",x,y,W,H);
      displayInput.setActive(false);
    }
    InputField(String text, int x, int y, int W, int H)
    {
      super(x,y,W,H);
      clickable=true;
      displayText=new Text(text,x,y,W,H);
      displayText.x-=displayText.realW;
      displayText.setActive(false);
      displayInput=new Text("",x,y,W,H);
      displayInput.setActive(false);
      hasImage=false;
      hasText=true;
    }
    public float getInput()
    {
      return input;
    }
    public void setImage(String s)
    {
      displayImage=loadImage(path+"Assets/"+s);
      resizePoint(displayImage,4,4);
      hasImage=true;
    }
    public void offsetDisplayText(int dx, int dy)
    {
      if(hasText==false)return;
      displayText.x+=dx;
      displayText.y+=dy;
    }
    public void setDisplayText(String s)
    {
      if(hasText)displayText.x+=displayText.realW;
      displayText = new Text(s,x,y,W,H);
      //System.out.println(s+str(displayText.realW)+" "+str(W));
      displayText.x=x-min(W,displayText.realW);
      displayText.setActive(false);
      hasText=true;
    }
    public void centerDisplayText(int W)
    {
      if(hasText==false)return;
      displayText=new Text(displayText.text,x,y,W,H);
      displayText.x-=displayText.realW;
      displayText.setActive(false);
      displayText.y=displayText.y+((H/2)-(displayText.size/2));
      displayInput.y=displayInput.y+((H/2)-(displayInput.size/2));
    }
    public void centerDisplayText()
    {
      if(hasText==false)return;
      displayText.y=displayText.y+((H/2)-(displayText.size/2));
      displayInput.y=displayInput.y+((H/2)-(displayInput.size/2));
    }
    public void centerDisplayInput()
    {
      displayInput.x=x+max(0,(W/2)-(displayInput.realW/2));
    }
    @Override public  void onClick()
    {
      enteringText=true;
      justClicked=true;
    }
    public void enterInput()
    {
      if(justClicked)
      {
        haveReleasedKey=false;
        justClicked=false;
        return;
      }
      if(haveReleasedKey==false)return;
      haveReleasedKey=false;
      if(floatPointPressed==false)
      {
        for(int i=0; i<=9; ++i)
        {
          if(lastKeyReleased==i+'0')
          {
            input*=10;
            input+=i;
            displayInput.setText(displayInput.text+(char)(i+'0'));
          }
        }
        if(lastKeyReleased=='.'||lastKeyReleased==',')
        {
          floatPointPressed=true;
          displayInput.setText(displayInput.text+'.');
        }
        if(lastKeyReleased==BACKSPACE)
        {
          input=(int)(input/10);
          if(displayInput.text.length()>0)
          {
            String s="";
            for(int j=0; j<displayInput.text.length()-1; ++j)
            {
              s+=displayInput.text.charAt(j);
            }
            displayInput.setText(s);
          }
        }
      }
      else
      {
        for(int i=0; i<=9; ++i)
        {
          if(lastKeyReleased==i+'0')
          {
            input+=(powOfTen*i);
            powOfTen/=10;
            displayInput.setText(displayInput.text+(char)(i+'0'));
          }
        }
        if(lastKeyReleased==BACKSPACE)
        {
          if(displayInput.text.charAt(displayInput.text.length()-1)=='.')
          {
            floatPointPressed=false;
          }
          else
          {
            input=input-((((int)(input/(powOfTen*10)))%10)*(powOfTen*10));
            powOfTen*=10;
          }
          if(displayInput.text.length()>0)
          {
            String s="";
            for(int j=0; j<displayInput.text.length()-1; ++j)
            {
              s+=displayInput.text.charAt(j);
            }
            displayInput.setText(s);
          }
        }
      }
      if(lastKeyReleased==ENTER||lastKeyReleased==RETURN)
      {
        enteringText=false;
      }
      centerDisplayInput();
      System.out.println(input);
    }
    @Override public  void Display()
    {
      if(enteringText)
      {
        enterInput();
      }
      if(hasImage==false)
      {
        super.Display();
      }
      else
      {
        image(displayImage,x,y,W,H);
      }
      if(hasText==true)
      {
        displayText.Display();
      }
      displayInput.Display();
    }
  }
  class RadioButtonList extends StaticUIComponent /////////////////////// #RadioButtonList //////////////////////////
  {
    ArrayList<RadioButton>buttons;
    int textHeight=8*SCALE;
    Text displayText;
    boolean hasText=false;
    RadioButtonList(int x, int y, int W, int H)
    {
      super(x,y,W,H);
      buttons = new ArrayList<RadioButton>();
    }
    RadioButtonList(String text, int x, int y, int W, int H)
    {
      super(x,y,W,H);
      buttons = new ArrayList<RadioButton>();
      setDisplayText(text);
    }
    public void addButton(String text)
    {
      buttons.add(new RadioButton(text,x,y+(textHeight*buttons.size()),W,H,buttons));
      if(buttons.size()==1)buttons.get(0).pressed=true;
      buttons.get(buttons.size()-1).setActive(false);
    }
    public void offsetDisplayText(int dx, int dy)
    {
      if(hasText==false)return;
      displayText.x+=dx;
      displayText.y+=dy;
    }
    public int pressedButton()
    {
      for(int i=0; i<buttons.size(); ++i)
      {
        if(buttons.get(i).pressed==true)
        {
          return i;
        }
      }
      return -1;
    }
    public void setDisplayText(String s)
    {
      if(hasText)displayText.x+=displayText.realW;
      displayText = new Text(s,x,y,W,H);
      displayText.x-=displayText.realW;
      displayText.setActive(false);
      hasText=true;
    }
    public void centerDisplayText()
    {
      if(hasText==false)return;
      displayText.y=displayText.y+((H/2)-(displayText.size/2));
    }
    @Override public  void Display()
    {
      for(int i=0; i<buttons.size(); ++i)
      {
        buttons.get(i).Display();
      }
      if(hasText==true)
      {
        displayText.Display();
      }
    }
  }
  class Point extends StaticUIComponent /////////////////////// #Point //////////////////////////
  {
    PImage displayImage;
    boolean hasImage=false;
    boolean hasLabel=false;
    boolean labelHidden=false;
    Text label;
    float xFloat;
    float yFloat;
    int xLabelOffset=5;
    int yLabelOffset=5;
    int xImageOffset=0;
    int yImageOffset=0;
    int maxImageX=32;
    int maxImageY=32;
    int maxLabelW=100;
    int maxLabelH=100;
    Point(float x, float y)
    {
      super(PApplet.parseInt(x),PApplet.parseInt(y),1,1);
      xFloat=x;
      yFloat=y;
      hasImage=false;
    }
    Point(int x, int y)
    {
      super(x,y,1,1);
      xFloat=x;
      yFloat=y;
      hasImage=false;
    }
    Point(float x, float y, String img)
    {
      super(PApplet.parseInt(x),PApplet.parseInt(y),1,1);
      xFloat=x;
      yFloat=y;
      displayImage=loadImage(path+"Assets/"+img);
      resizePoint(displayImage,4,4);
      hasImage=true;
    }
    Point(int x, int y, String img)
    {
      super(x,y,1,1);
      xFloat=x;
      yFloat=y;
      displayImage=loadImage(path+"Assets/"+img);
      resizePoint(displayImage,4,4);
      hasImage=true;
    }
    Point(float x, float y, PImage img)
    {
      super(PApplet.parseInt(x),PApplet.parseInt(y),1,1);
      xFloat=x;
      yFloat=y;
      displayImage=img;
      hasImage=true;
    }
    Point(int x, int y, PImage img)
    {
      super(x,y,1,1);
      xFloat=x;
      yFloat=y;
      displayImage=img;
      hasImage=true;
    }
    Point(Point other)
    {
      super(other.x,other.y,1,1);
      this.xFloat=other.xFloat;
      this.yFloat=other.yFloat;
      this.displayImage=other.displayImage;
      this.hasImage=other.hasImage;
      this.hasLabel=other.hasLabel;
      this.labelHidden=other.labelHidden;
      this.label=other.label;
      this.xLabelOffset=other.xLabelOffset;
      this.yLabelOffset=other.yLabelOffset;
      this.xImageOffset=other.xImageOffset;
      this.yImageOffset=other.yImageOffset;
      this.maxImageX=other.maxImageX;
      this.maxImageY=other.maxImageY;
      this.maxLabelW=other.maxLabelW;
      this.maxLabelH=other.maxLabelH;
    }
    public void Translate(int x, int y)
    {
      int dx=x-this.x;
      int dy=y-this.y;
      this.x=x;
      this.y=y;
      if(label!=null)
      {
        label.x+=dx;
        label.y+=dy;
      }
    }
    public void setLabelOffset(int dx, int dy)
    {
      xLabelOffset=dx;
      yLabelOffset=dy;
      if(hasLabel)
      {
        label.x=x+xLabelOffset;
        label.y=y+yLabelOffset;
      }
    }
    public void setImageOffset(int dx, int dy)
    {
      xImageOffset=dx;
      yImageOffset=dy;
    }
    public void setImage(String s)
    {
      displayImage=loadImage(path+"Assets/"+s);
      resizePoint(displayImage,4,4);
      hasImage=true;
    }
    public void setLabel(String s)
    {
      Text t=new Text(s,x+xLabelOffset,y+yLabelOffset,maxLabelW,maxLabelH);
      label=t;
      t.setActive(false);
      hasLabel=true;
    }
    public void setLabel(Text t)
    {
      label=t;
      t.setActive(false);
      hasLabel=true;
    }
    public void hideLabel()
    {
      labelHidden=true;
    }
    public void showLabel()
    {
      labelHidden=false;
    }
    @Override public  void Display()
    {
      if(hasImage==false)
      {
        super.Display();
      }
      else
      {
        image(displayImage,x+xImageOffset,y+yImageOffset,maxImageX,maxImageY);
      }
      if(hasLabel==true&&labelHidden==false)
      {
        label.Display();
      }
    }
  }
  public String roundF(float f, int d) /////////////////////// #Rounding //////////////////////////
  {
    float ff=f;
    for(int i=0; i<d; ++i)
    {
      ff*=10;
    }
    int fff=round(ff);
    String ans="";
    for(int i=0; i<d; ++i)
    {
      char ch=(char)((fff%10)+'0');
      fff/=10;
      ans = ch + ans;
    }
    if(d>0)
    {
      ans = "." + ans;
    }
    ans = str(fff)+ans;
    return ans;
  }
  class Plot extends StaticUIComponent /////////////////////// #Plot //////////////////////////
  {
    int currentDataset=0;
    int maxDatasets=10;
    
    ArrayList<Point>xAxis;
    ArrayList<Point>yAxis;
    float rangeX=10;
    float rangeY=10;
    int densityX=10;
    int densityY=10;
    int labelSize=SCALE*10;
    float stepX=1;
    float stepY=1;
    ArrayList<ArrayList<Point>>dataPoints;
    Text xAxisLabel=null;
    Text yAxisLabel=null;
    int xAxisLabelYOffset=SCALE*20;
    int yAxisLabelXOffset=-SCALE*50;
    boolean hasAxisLabels=false;
    Point pointStyle[]=null;
    Point origin;
    Colour lineColour[];
    float scalingFX=(float)W/rangeX;
    float scalingFY=(float)H/rangeY;
    PImage xAxisStep;
    PImage yAxisStep;
    int xAxisPrecision=2;
    int yAxisPrecision=2;
    
    Plot(int x, int y, int W, int H)
    {
      super(x,y,W,H);
      xAxis = new ArrayList<Point>();
      yAxis = new ArrayList<Point>();
      xAxisStep=loadImage(path+"Assets/xAxisStep.png");
      yAxisStep=loadImage(path+"Assets/yAxisStep.png");
      resizePoint(xAxisStep,4,4);
      resizePoint(yAxisStep,4,4);
      dataPoints = new ArrayList<ArrayList<Point>>();
      pointStyle = new Point[10];
      lineColour = new Colour[10];
      for(int i=0; i<maxDatasets; ++i)
      {
        dataPoints.add(new ArrayList<Point>());
        lineColour[i] = new Colour("red");
        pointStyle[i] = null;
      }
      origin=new Point(x,y+H);
      origin.setActive(false);
      updateDensity();
    }
    @Override public  void setW(int W)
    {
      super.setW(W);
      updateAxisLabels();
      updateDensity();
    }
    @Override public  void setH(int H)
    {
      super.setH(H);
      updateAxisLabels();
      updateDensity();
    }
    public void setMaxDatasets(int mx)
    {
      maxDatasets=mx;
      currentDataset=0;
      pointStyle = new Point[maxDatasets];
      lineColour = new Colour[maxDatasets];
      for(int i=0; i<maxDatasets; ++i)
      {
        lineColour[i] = new Colour("red");
        pointStyle[i] = null;
      }
    }
    public void setCurrentDataset(int ds)
    {
      currentDataset=ds;
    }
    public void setLineColour(Colour c)
    {
      lineColour[currentDataset]=c;
    }
    public void setPointStyle(Point pt)
    {
      pt.setActive(false);
      pointStyle[currentDataset]=pt;
    }
    public void setLabelSize(int s)
    {
      labelSize=SCALE*s;
    }
    public void setRange(float rangeX, float rangeY)
    {
      this.rangeX=rangeX;
      this.rangeY=rangeY;
      updateDensity();
    }
    public void setAxisPrecision(int xp, int yp)
    {
      xAxisPrecision=xp;
      yAxisPrecision=yp;
      updateDensity();
    }
    public void setAxisLabels(String xText, String yText)
    {
      hasAxisLabels=true;
      xAxisLabel=new Text(xText,x+(W/2),y+H+xAxisLabelYOffset,W,H);
      xAxisLabel.setActive(false);
      yAxisLabel=new Text(yText,x+yAxisLabelXOffset,y+(H/2),W,H);
      yAxisLabel.setActive(false);
    }
    public void updateAxisLabels()
    {
      xAxisLabel=new Text(xAxisLabel.text,x+(W/2)-(xAxisLabel.realW/2),y+H+xAxisLabelYOffset,W,H);
      xAxisLabel.setActive(false);
      yAxisLabel=new Text(yAxisLabel.text,x-(yAxisLabel.realW)+yAxisLabelXOffset,y+(H/2),W,H);
      yAxisLabel.setActive(false);
    }
    public void updateDensity()
    {
      scalingFX=((float)W)/rangeX;
      scalingFY=((float)H)/rangeY;
      stepX=scalingFX*rangeX/((float)densityX);
      stepY=scalingFY*rangeY/((float)densityY);
      xAxis = new ArrayList<Point>();
      yAxis = new ArrayList<Point>();
      for(int i=0; i<=densityX; ++i)
      {
        Point p1=new Point(PApplet.parseInt(x+(stepX*((float)i))),y+H-(xAxisStep.height/8),xAxisStep); //scaled 4x and we want half height hence xAxisStep.height/8
        p1.setLabel(roundF(stepX*((float)i)/scalingFX,xAxisPrecision));
        p1.setLabelOffset(-p1.label.realW/2,(8*SCALE)+(xAxisStep.height/8));
        p1.label.setSize(labelSize);
        p1.setActive(false);
        xAxis.add(p1);
      }
      for(int i=0; i<=densityY; ++i)
      {
        Point p1=new Point(x-(yAxisStep.width/8),PApplet.parseInt((y+H)-(stepY*((float)i))),yAxisStep);
        p1.setLabel(roundF(stepY*((float)i)/scalingFY,yAxisPrecision));
        p1.setLabelOffset(-p1.label.realW,-4*SCALE);
        p1.label.setSize(labelSize);
        p1.setActive(false);
        yAxis.add(p1);
      }
    }
    public void setDensity(int dx, int dy)
    {
      densityX=dx;
      densityY=dy;
      updateDensity();
    }
    public void addData(float px, float py)
    {
      if(pointStyle[currentDataset]==null)
      {
        Point p1=new Point(px,py);
        p1.setActive(false);
        dataPoints.get(currentDataset).add(p1);
      }
      else
      {
        if(pointStyle[currentDataset].hasImage==true)
        {
          Point p1=new Point(px,py,pointStyle[currentDataset].displayImage);
          p1.setImageOffset(-pointStyle[currentDataset].displayImage.width/8,-pointStyle[currentDataset].displayImage.height/8);
          p1.setActive(false);
          dataPoints.get(currentDataset).add(p1);
        }
        else
        {
          Point p1=new Point(px,py);
          p1.setActive(false);
          dataPoints.get(currentDataset).add(p1);
        }
      }
    }
    @Override public  void Display()
    {
      super.Display();
      for(int j=0; j<maxDatasets; ++j)
      {
        for(int i=0; i<dataPoints.get(j).size(); ++i)
        {
          Point p1=new Point(dataPoints.get(j).get(i));
          p1.Translate(round(x+((p1.xFloat)*scalingFX)),round((y+H)-((p1.yFloat)*scalingFY)));
          p1.setActive(false);
          p1.Display();
        }
        for(int i=1; i<dataPoints.get(j).size(); ++i)
        {
          Point p1=new Point(dataPoints.get(j).get(i));
          Point p2=new Point(dataPoints.get(j).get(i-1));
          p1.Translate(round(x+((p1.xFloat)*scalingFX)),round((y+H)-((p1.yFloat)*scalingFY)));
          p2.Translate(round(x+((p2.xFloat)*scalingFX)),round((y+H)-((p2.yFloat)*scalingFY)));
          p1.setActive(false);
          p2.setActive(false);
          stroke(lineColour[j].R,lineColour[j].G,lineColour[j].B,lineColour[j].alpha);
          line(p1.x,p1.y,p2.x,p2.y);
        }
      }
      for(int i=0; i<xAxis.size(); ++i)
      {
        Point p1=new Point(xAxis.get(i));
        p1.setActive(false);
        p1.Display();
      }
      for(int i=0; i<yAxis.size(); ++i)
      {
        Point p1=new Point(yAxis.get(i));
        p1.setActive(false);
        p1.Display();
      }
      if(hasAxisLabels)
      {
        xAxisLabel.Display();
        yAxisLabel.Display();
      }
    }
  }
  class AnnuityPlot extends Plot /////////////////////// #Annuity //////////////////////////
  {
    Loan L;
    AnnuityPlot(int x, int y, int W, int H)
    {
      super(x,y,W,H);
      setMaxDatasets(4);
      L=new Loan();
      this.setColour(new Colour(255,240,200));
      this.setBorder(new Colour("3:1:3"));
      this.setRange(10,200);
      this.setAxisPrecision(0,2);
      this.setAxisLabels("Time (Months)", "Amount (‚Ç¨)");
      this.setDensity(20,20);
      this.setW(300*SCALE);
      this.lineColour[1] = new Colour("blue");
      this.lineColour[2] = new Colour("green");
      this.setCurrentDataset(0);
      this.setPointStyle(new Point(0,0,"small_coin.png"));
      this.setCurrentDataset(1);
      this.setPointStyle(new Point(0,0,"principal.png"));
      this.setCurrentDataset(2);
      this.setPointStyle(new Point(0,0,"interest.png"));
      this.setCurrentDataset(0);
    }
    AnnuityPlot(int x, int y, int W, int H, Loan L)
    {
      super(x,y,W,H);
      setMaxDatasets(4);
      setLoanData(L.duration,L.amount,L.rate,-1,-1, false, -1, -1);
    }
    public void setLoanData(int len, float pay, float rate, int LBound, int RBound, boolean doDelay, int LDelay, int RDelay)
    {
      this.L = new Loan();
      if(doDelay)
      {
        L.setDuration(len+max(RDelay-LDelay+1,0));
      }
      else
      {
        L.setDuration(len);
      }
      L.setAmount(pay);
      L.setRate(rate);
      dataPoints.set(0, new ArrayList<Point>());
      dataPoints.set(1, new ArrayList<Point>());
      dataPoints.set(2, new ArrayList<Point>());
      dataPoints.set(3, new ArrayList<Point>());
      int L=(LBound==-1 ? 1 : LBound);
      int R=(RBound==-1 ? (this.L.duration) : RBound);
      float exp=1;
      for(int i=1; i<=len; ++i)
      {
        exp*=(1f+rate);
      }
      float A=pay*(rate*exp)/(exp-1); //annuity: equal pay per month
      
      exp=1f; //reset exp for principal vs interest graph
      
      float BOfDelay = 0;
      
      float exp2=1f;
      for(int j=1; j<LBound; ++j)
      {
        exp2 *= (1f + rate);
      }
      
      BOfDelay = exp2*pay-(A*(exp2-1f)/rate); //principal left to pay
      
      for(int i=1; i<=this.L.duration; ++i)
      {
        if(doDelay == false)
        {
          if(i>=L&&i<=R)
          {
            setCurrentDataset(0);
            addData(i,A);
          }
          
          float B = exp*pay-(A*(exp-1f)/rate); //principal left to pay
          if(i>=L&&i<=R)
          {
            setCurrentDataset(1); //principal
            addData(i,A-B*rate);
            setCurrentDataset(2); //interest
            addData(i,(B*rate));
            setCurrentDataset(3); //left to pay
            addData(i,(len-i)*A);
          }
          exp*=(1f+rate); //exp is now (1+r)^i
        }
        else
        {
          if(i<LDelay||i>RDelay)
          {
            if(i>=L&&i<=R)
            {
              setCurrentDataset(0);
              addData(i,A);
            }
            
            float B = exp*pay-(A*(exp-1f)/rate); //principal left to pay
            if(i>=L&&i<=R)
            {
              setCurrentDataset(1); //principal
              addData(i,A-B*rate);
              setCurrentDataset(2); //interest
              addData(i,(B*rate));
              setCurrentDataset(3); //left to pay
              if(i<LDelay)
              {
                addData(i,(LDelay - i - 1)*A + ((RDelay-LDelay+1)*rate*BOfDelay) + (this.L.duration-RDelay)*A);
              }
              else
              {
                addData(i,(this.L.duration-i)*A);
              }
            }
            exp*=(1f+rate); //exp is now (1+r)^i
          }
          else
          {
            if(i>=L&&i<=R)
            {
              setCurrentDataset(0);
              addData(i,BOfDelay*rate);
              setCurrentDataset(1); //principal
              addData(i,0);
              setCurrentDataset(2); //interest
              addData(i,(BOfDelay*rate));
              setCurrentDataset(3); //left to pay
              addData(i,((RDelay-i+1)*rate*BOfDelay) + (this.L.duration-RDelay)*A);
            }
          }
        }
      }
      updatePlotSettings(A);
    }
    public void updatePlotSettings(float A)
    {
      if(L!=null)
      {
        this.setRange(L.duration,/*(float)L.duration**/A*1.1f); //Uncomment to see sum left to pay
      }
    }
  }
  class LinearPlot extends Plot /////////////////////// #Linear //////////////////////////
  {
    Loan L;
    LinearPlot(int x, int y, int W, int H)
    {
      super(x,y,W,H);
      setMaxDatasets(4);
      L=new Loan();
      this.setColour(new Colour(255,240,200));
      this.setBorder(new Colour("3:1:3"));
      this.setRange(10,200);
      this.setAxisPrecision(0,2);
      this.setAxisLabels("Time (Months)", "Amount (‚Ç¨)");
      this.setDensity(20,20);
      this.setW(300*SCALE);
      this.lineColour[1] = new Colour("blue");
      this.lineColour[2] = new Colour("green");
      this.setCurrentDataset(0);
      this.setPointStyle(new Point(0,0,"small_coin.png"));
      this.setCurrentDataset(1);
      this.setPointStyle(new Point(0,0,"principal.png"));
      this.setCurrentDataset(2);
      this.setPointStyle(new Point(0,0,"interest.png"));
      this.setCurrentDataset(0);
    }
    LinearPlot(int x, int y, int W, int H, Loan L)
    {
      super(x,y,W,H);
      setMaxDatasets(4);
      setLoanData(L.duration,L.amount,L.rate,-1,-1,false,-1,-1);
    }
    public void setLoanData(int len, float pay, float rate, int LBound, int RBound, boolean doDelay, int LDelay, int RDelay)
    {
      this.L=new Loan();
      if(doDelay)
      {
        L.setDuration(len+max(RDelay-LDelay+1,0));
      }
      else
      {
        L.setDuration(len);
      }
      L.setAmount(pay);
      L.setRate(rate);
      dataPoints.set(0, new ArrayList<Point>());
      dataPoints.set(1, new ArrayList<Point>());
      dataPoints.set(2, new ArrayList<Point>());
      dataPoints.set(3, new ArrayList<Point>());
      int L=(LBound==-1 ? 1 : LBound);
      int R=(RBound==-1 ? this.L.duration : RBound);
      float equalPrincipal=pay/((float)len);
      float totalSum=0;
      if(doDelay==false)
      {
        for(int i=1; i<=(this.L.duration); ++i)
        {
          if(i>=L&&i<=R)
          {
              setCurrentDataset(0);
              addData(i,equalPrincipal+(rate*pay*(1-((float)(i-1)/((float)(len))))));
              setCurrentDataset(1);
              addData(i,equalPrincipal);
              setCurrentDataset(2);
              addData(i,(rate*pay*(1-((float)(i-1)/((float)(len))))));
          }
          totalSum += (equalPrincipal + (rate*pay*(1-((float)(i-1)/((float)(len))))));
        }
        setCurrentDataset(3);
        float prev = totalSum;
        for(int i=1;  i<=this.L.duration; ++i)
        {
          if(i>=L&&i<=R)
          {
            addData(i,prev - (equalPrincipal + (rate*pay*(1-((float)(i-1)/((float)(len)))))));
          }
          prev -= (equalPrincipal + (rate*pay*(1-((float)(i-1)/((float)(len))))));
        }
      }
      else
      {
        float toPay = pay;
        for(int i=1; i<=(this.L.duration); ++i)
        {
          if(i<LDelay||i>RDelay)
          {
            if(i>=L&&i<=R)
            {
                setCurrentDataset(0);
                addData(i,equalPrincipal+(rate*toPay));
                setCurrentDataset(1);
                addData(i,equalPrincipal);
                setCurrentDataset(2);
                addData(i,rate*toPay);
            }
            totalSum += (equalPrincipal + (rate*toPay));
            toPay -= equalPrincipal;
          }
          else
          {
            if(i>=L&&i<=R)
            {
                setCurrentDataset(0);
                addData(i,(rate*toPay));
                setCurrentDataset(1);
                addData(i,0);
                setCurrentDataset(2);
                addData(i,rate*toPay);
            }
            totalSum += (rate*toPay);
          }
        }
        setCurrentDataset(3);
        float prev = totalSum;
        toPay = pay;
        ///////////////////////////UNFINISHED FROM HERE: Do the same for AnnuityPlot(). Packages and JAR file.
        for(int i=1;  i<=this.L.duration; ++i)
        {
          if(i<LDelay||i>RDelay)
          {
            if(i>=L&&i<=R)
            {
              addData(i,prev - (equalPrincipal + (rate*toPay)));
            }
            prev -= (equalPrincipal + (rate*toPay));
            toPay -= equalPrincipal;
          }
          else
          {
            if(i>=L&&i<=R)
            {
              addData(i,prev - (rate*toPay));
            }
            prev -= (rate*toPay);
          }
        }
      }
      updatePlotSettings(totalSum,len);
    }
    public void updatePlotSettings(float ts, float len)
    {
      if(L!=null)
      {
        float equalPrincipal=L.amount/len;
        this.setRange(L.duration,/*ts+0**/(equalPrincipal+L.amount*L.rate)); //again, delete the comment for remaining sum to pay
      }
    }
  }
  class PlotTable extends StaticUIComponent /////////////////////// #Table #PlotTable //////////////////////////
  {
    int cols;
    int rows;
    StaticUIComponent tableSquares[][];
    Text tableTexts[][];
    PlotTable(Plot P, int x, int y, int W, int H, String[] labels)
    {
      super(x,y,W,H);
      cols = P.maxDatasets + 1;
      rows = P.dataPoints.get(0).size() + 1;
      if(labels.length<cols)
      {
        return;
      }
      int cellW = W / cols;
      int cellH = H / rows;
      tableSquares = new StaticUIComponent[cols][rows];
      tableTexts = new Text[cols][rows];
      for(int i=1; i<cols; ++i)
      {
        for(int j=1; j<rows; ++j)
        {
          tableSquares[i][j] = new StaticUIComponent(x+(i*cellW),y+(j*cellH),cellW,cellH);
          tableSquares[i][j].setColour(new Colour(255,255,240,240));
          tableSquares[i][j].setActive(false);
          tableTexts[i][j] = new Text(str(P.dataPoints.get(i-1).get(j-1).yFloat),x+(i*cellW),y+(j*cellH),cellW,cellH);
          tableTexts[i][j].setSize(6*SCALE);
          tableTexts[i][j].setActive(false);
        }
      }
      for(int j=1; j<rows; ++j)
      {
        tableSquares[0][j] = new StaticUIComponent(x,y+(j*cellH),cellW,cellH);
        tableSquares[0][j].setColour(new Colour(240,150,255,255));
        tableSquares[0][j].setActive(false);
        tableTexts[0][j] = new Text(str(P.dataPoints.get(0).get(j-1).xFloat),x,y+(j*cellH),cellW,cellH);
        tableTexts[0][j].setColour(new Colour("red"));
        tableTexts[0][j].setSize(6*SCALE);
        tableTexts[0][j].setActive(false);
      }
      for(int i=0; i<cols; ++i)
      {
        tableSquares[i][0] = new StaticUIComponent(x+(i*cellW),y,cellW,cellH);
        tableSquares[i][0].setColour(new Colour(0,0,50,255));
        tableSquares[i][0].setActive(false);
        tableTexts[i][0] = new Text(labels[i],x+(i*cellW),y,cellW,cellH);
        tableTexts[i][0].setColour(new Colour("white"));
        tableTexts[i][0].setSize(6*SCALE);
        tableTexts[i][0].setActive(false);
      }
    }
    @Override public  void Display()
    {
      for(int i=0; i<cols; ++i)
      {
        for(int j=0; j<rows; ++j)
        {
          tableSquares[i][j].Display();
          tableTexts[i][j].Display();
        }
      }
    }
  }
  class StringTable /////////////////////// #Table #StringTable //////////////////////////
  {
    PlotTable UITable;
    String[][] table;
    StringTable(PlotTable pt)
    {
      UITable=pt;
      table = new String[UITable.cols][UITable.rows];
      for(int i=0; i<UITable.cols; ++i)
      {
        for(int j=0; j<UITable.rows; ++j)
        {
          table[i][j]=UITable.tableTexts[i][j].text;
        }
      }
    }
  }
  class Checkbox extends StaticButton
  {
    PImage activeImage;
    Boolean pressed=false;
    Checkbox(int x, int y, int W, int H)
    {
      super(x,y,W,H);
      setImage("rounded.png");
      setActiveImage("rounded_checker.png");
    }
    Checkbox(String s, int x, int y, int W, int H)
    {
      super(s,x,y,W,H);
      displayText=new Text(s,x,y,W,H);
      displayText.setActive(false);
      setImage("rounded.png");
      setActiveImage("rounded_checker.png");
      offsetDisplayText(displayImage.width/8,0);
    }
    public void setActiveImage(String s)
    {
      activeImage=loadImage(path+"Assets/"+s);
      resizePoint(activeImage,4,4);
    }
    @Override public  void onClick()
    {
      pressed=!pressed;
    }
    @Override public  void Display()
    {
      if(!pressed)
      {
        image(displayImage,x,y,displayImage.width/8,displayImage.height/8);
      }
      else
      {
        image(activeImage,x,y,activeImage.width/8,activeImage.height/8);
      }
      if(hasText==true)
      {
        displayText.Display();
      }
    }
  }
  class HiddenRangeInput extends StaticUIComponent /////////////////////// #HiddenRangeInput #HiddenInput //////////////////////////
  {
    Checkbox checker;
    InputField LRange;
    InputField RRange;
    HiddenRangeInput(int x, int y, int W, int H, String text, String left, String right)
    {
      super(x,y,W,H);
      checker = new Checkbox(text,x+(W/6),y,W/6,H);
      checker.setActive(false);
      
      LRange = new InputField(left,x+(3*(W/6)),y,(W/6),H);
      LRange.setDisplayText(left);
      LRange.displayText.setSize(10*SCALE);
      LRange.displayInput.colour=new Colour("black");
      LRange.setImage("rounded.png");
      LRange.centerDisplayText();
      
      RRange = new InputField(right,x+(5*(W/6)),y,(W/6),H);
      RRange.setDisplayText(right);
      RRange.displayText.setSize(10*SCALE);
      RRange.displayInput.colour=new Colour("black");
      RRange.setImage("rounded.png");
      RRange.centerDisplayText();
      
      LRange.setActive(false);
      RRange.setActive(false);
    }
    public float[] getRange()
    {
      if(checker.pressed==false)
      {
        float[] f = {-1,-1};
        return f;
      }
      float[] f = {LRange.getInput(),RRange.getInput()};
      return f;
    }
    @Override public  void Display()
    {
      checker.Display();
      if(checker.pressed)
      {
        LRange.Display();
        RRange.Display();
      }
    }
  }
  class PlotButton extends StaticButton /////////////////////// #PlotButton #FunctionButton //////////////////////////
  {
    PlotButton(int x, int y, int W, int H)
    {
      super(x,y,W,H);
    }
    PlotButton(String text, int x, int y, int W, int H)
    {
      super(text,x,y,W,H);
    }
    @Override public  void onClick()
    {
      plotting=true;
      tabular=false;
    }
  }
  class TableButton extends StaticButton /////////////////////// #TableButton #FunctionButton //////////////////////////
  {
    TableButton(int x, int y, int W, int H)
    {
      super(x,y,W,H);
    }
    TableButton(String text, int x, int y, int W, int H)
    {
      super(text,x,y,W,H);
    }
    @Override public  void onClick()
    {
      tabular=true;
      plotting=false;
    }
  }
  class ExportTableButton extends StaticButton /////////////////////// #ExportTableButton #FunctionButton //////////////////////////
  {
    ExportTableButton(int x, int y, int W, int H)
    {
      super(x,y,W,H);
    }
    ExportTableButton(String text, int x, int y, int W, int H)
    {
      super(text,x,y,W,H);
    }
    @Override public  void onClick()
    {
      wantToSave=true;
    }
  }
  class ResetButton extends StaticButton /////////////////////// #ResetButton #FunctionButton //////////////////////////
  {
    ResetButton(int x, int y, int W, int H)
    {
      super(x,y,W,H);
    }
    ResetButton(String text, int x, int y, int W, int H)
    {
      super(text,x,y,W,H);
    }
    @Override public  void onClick()
    {
      unshowing=true;
    }
  }
  /////////////////////// #Variables //////////////////////////
  boolean plotting = false;
  boolean unshowing = false;
  boolean tabular = false;
  boolean wantToSave = false;
  boolean boundedL = false;
  boolean boundedR = false;
  boolean delaying = false;
  int LBound = 0;
  int RBound = 0;
  PlotButton plotButton;
  TableButton tableButton;
  ExportTableButton saveButton;
  ResetButton resetButton;
  PlotTable myPlotTable;
  StringTable output;
  InputField loanInput;
  InputField yearsInput;
  InputField monthsInput;
  InputField rateInput;
  InputField monthLFilter;
  InputField monthRFilter;
  InputField delayLRange;
  InputField delayRRange;
  HiddenRangeInput delayInput;
  Text monthsNote;
  Text yearsNote;
  Plot myPlot;
  LinearPlot linearLoan;
  AnnuityPlot annuityLoan;
  RadioButtonList loanChoice;
  Loan myLoan;
  //Point pp;
  /////////////////////// #Settings //////////////////////////
  public void settings()
  {
    size(SCALE*640, SCALE*360);
  }
  /////////////////////// #Setup //////////////////////////
  public void setup()
  {
    path = System.getProperty("user.dir").replace("\\","/");
    path += "/data/";
    //path += "/economics/";
    
    background = loadImage(path+"Assets/background.png");
    resizePoint(background,SCALE,SCALE);
    
    allUI=new ArrayList<StaticUIComponent>();
    
    plotButton=new PlotButton("curve sketch go brr",0*SCALE,25*SCALE,75*SCALE,25*SCALE);
    plotButton.setImage("classic.png");
    plotButton.setDisplayText("Plot the payments");
    plotButton.displayText.setSize(8*SCALE);
    
    tableButton=new TableButton("'; drop all tables;",100*SCALE,25*SCALE,75*SCALE,25*SCALE);
    tableButton.setImage("classic.png");
    tableButton.setDisplayText("See the payment table");
    tableButton.displayText.setSize(8*SCALE);
    
    saveButton=new ExportTableButton("hello world",200*SCALE,25*SCALE,75*SCALE,25*SCALE);
    saveButton.setImage("classic.png");
    saveButton.setDisplayText("Export as CSV");
    saveButton.displayText.setSize(8*SCALE);
    saveButton.displayText.setColour(new Colour(125,100,0));
    
    resetButton=new ResetButton("here we go again",25*SCALE,100*SCALE,25*SCALE,25*SCALE);
    resetButton.setImage("reset.png");
    resetButton.setDisplayText("");
    resetButton.displayText.setSize(8*SCALE);
    resetButton.displayText.setColour(new Colour(125,100,0));
    
    //pp = new Point(60,60,"coin.png");
    
    loanInput = new InputField(100*SCALE,180*SCALE,100*SCALE,20*SCALE);
    loanInput.setDisplayText("Enter the loan amount:");
    loanInput.displayText.setSize(10*SCALE);
    loanInput.displayInput.colour=new Colour("black");
    loanInput.setImage("rounded.png");
    loanInput.colour = new Colour(0,0,0,32);
    loanInput.centerDisplayText();
    
    yearsInput = new InputField(100*SCALE,220*SCALE,100*SCALE,20*SCALE);
    yearsInput.setDisplayText("Enter the loan duration:");
    yearsInput.displayText.setSize(10*SCALE);
    yearsInput.displayInput.colour=new Colour("black");
    yearsInput.setImage("rounded.png");
    yearsInput.colour = new Colour(0,0,0,32);
    yearsInput.centerDisplayText();
    
    yearsNote = new Text(" years, ",200*SCALE,225*SCALE,50*SCALE,20*SCALE);
    
    monthsInput = new InputField(250*SCALE,220*SCALE,100*SCALE,20*SCALE);
    monthsInput.setDisplayText("");
    monthsInput.displayInput.colour=new Colour("black");
    monthsInput.setImage("rounded.png");
    monthsInput.colour = new Colour(0,0,0,32);
    monthsInput.centerDisplayText();
    
    monthsNote = new Text(" months",350*SCALE,225*SCALE,50*SCALE,20*SCALE);
    
    monthLFilter = new InputField(450*SCALE,300*SCALE,50*SCALE,20*SCALE);
    monthLFilter.setDisplayText("Only months from:");
    monthLFilter.centerDisplayText(100*SCALE);
    monthLFilter.displayText.setSize(10*SCALE);
    monthLFilter.displayInput.colour=new Colour("black");
    monthLFilter.setImage("rounded.png");
    monthLFilter.colour = new Colour(0,0,0,32);
    
    monthRFilter = new InputField(550*SCALE,300*SCALE,50*SCALE,20*SCALE);
    monthRFilter.setDisplayText("to:   ");
    monthRFilter.displayInput.colour=new Colour("black");
    monthRFilter.setImage("rounded.png");
    monthRFilter.colour = new Colour(0,0,0,32);
    monthRFilter.centerDisplayText();
    
    rateInput = new InputField(100*SCALE,260*SCALE,100*SCALE,20*SCALE);
    rateInput.setDisplayText("Enter the yearly rate (%):");
    rateInput.displayText.setSize(8*SCALE);
    rateInput.displayInput.colour=new Colour("black");
    rateInput.setImage("rounded.png");
    rateInput.colour = new Colour(0,0,0,32);
    rateInput.centerDisplayText();
    
    loanChoice = new RadioButtonList("Loan Type ", 270*SCALE,260*SCALE,100*SCALE,20*SCALE);
    loanChoice.addButton("Annuity Loan");
    loanChoice.addButton("Linear Loan");
    
    delayInput = new HiddenRangeInput(350*SCALE,260*SCALE,240*SCALE,20*SCALE,"Delay the payments?","From:","to:");
    
    linearLoan = new LinearPlot(320*SCALE,40*SCALE,160*SCALE,160*SCALE);
    annuityLoan = new AnnuityPlot(320*SCALE,40*SCALE,160*SCALE,160*SCALE);
    linearLoan.setLoanData(24,40000,.2f,-1,-1,false,-1,-1);
    linearLoan.setActive(false);
    annuityLoan.setLoanData(24,40000,.2f,-1,-1,false,-1,-1);
    annuityLoan.setActive(false);
    myLoan = new Loan();
    
    String[] tempLabels  = {"Time (months)","Total","Principal","Interest","Left to pay"};
    myPlotTable = new PlotTable(annuityLoan,320*SCALE,40*SCALE,160*SCALE,160*SCALE,tempLabels);
    myPlotTable.setActive(false);
    
    output = new StringTable(myPlotTable);
    
    background(background);
  }
  /////////////////////// #Draw #Update #Loop //////////////////////////
  public void draw()
  {
    background(background);
    renderUI();
    doClicks();
    getRestrictions();
    updateMyLoan();
    if(wantToSave)
    {
      saveTableToFile();
    }
    if(debugMode==true&&key=='t')
    {
      doDebug();
    }
  }
  /////////////////////// #Export #Save //////////////////////////
  public void saveTableToFile()
  {
    JFileChooser chooseFile = new JFileChooser();
    File currentDirectory;
    currentDirectory = new File(System.getProperty("user.dir").replace("\\","/"));
    chooseFile.setCurrentDirectory(currentDirectory);
    chooseFile.setDialogTitle("Save Level");
    chooseFile.setFileFilter(new FileFilter() {
      
      public String getDescription()
      {
        return "CSV File (*.csv)";
      }
      public boolean accept(File thisFile)
      {
        if(thisFile.isDirectory())
        {
          return true;
        }
        else
        {
          String filename = thisFile.getName().toLowerCase();
          return filename.endsWith(".csv");
        }
      }
    });
    chooseFile.setCurrentDirectory(currentDirectory);
    int returnValue = chooseFile.showOpenDialog(null);
    if(returnValue == JFileChooser.APPROVE_OPTION)
    {
      File selectedFile = chooseFile.getSelectedFile();
      fileSelected(selectedFile);
    }
    else
    {
      fileSelected(null);
    }
  }
  /////////////////////// #Export2 #Save2 //////////////////////////
  public void fileSelected(File selection)
  {
    if(selection == null)
    {
      System.out.println("Saving level as 'my_table.csv'");
      selection = new File("my_table.csv");
    }
    try{
      FileWriter myWriter = new FileWriter(selection.getAbsolutePath());
    for(int i=0; i<output.UITable.rows; ++i)
    {
      for(int j=0; j<output.UITable.cols; ++j)
      {
        myWriter.write(output.table[j][i]);
        if(j+1<output.UITable.cols)myWriter.write(",");
        else if(i+1<output.UITable.rows)myWriter.write("\n");
      }
    }
    myWriter.close();
    }
    catch(IOException e)
    {
      System.out.println("An error occurred while trying to access the file: " + e.getMessage());
    }
    wantToSave=false;
  }
  /////////////////////// #Render #Active //////////////////////////
  public void renderUI()
  {
    for(int i=0; i<allUI.size(); ++i)
    {
      if(allUI.get(i).isActive==true)
      {
        allUI.get(i).Display();
      }
    }
  }
  /////////////////////// #Click #Action //////////////////////////
  public void doClicks()
  {
    for(int i=0; i<allUI.size(); ++i)
    {
      if(allUI.get(i).clickable==true)
      {
        allUI.get(i).click();
      }
    }
  }
  /////////////////////// #Restrictions //////////////////////////
  public void getRestrictions()
  {
    if(monthLFilter.displayInput.text.equals("")==true)
    {
      boundedL=false;
    }
    else
    {
      boundedL=true;
      LBound=(int)monthLFilter.getInput();
    }
    if(monthRFilter.displayInput.text.equals("")==true)
    {
      boundedR=false;
    }
    else
    {
      boundedR=true;
      RBound=(int)monthRFilter.getInput();
    }
    delaying=delayInput.checker.pressed;
  }
  /////////////////////// #UpdateLoan //////////////////////////
  public void updateMyLoan()
  {
    getRestrictions();
    if(plotting||tabular)
    {
      //System.out.println("Whoops");
      int years = (int)(yearsInput.getInput());
      int months = (int)(monthsInput.getInput());
      System.out.println(str(years)+" "+str(months));
      myLoan.setDuration(years,months);
      myLoan.setAmount(loanInput.getInput());
      myLoan.setRate(rateInput.getInput()/1200); // percent, yearly rate -> fraction, monthly rate
      if(boundedL&&boundedR)
      {
        if(delaying==false)
        {
          linearLoan.setLoanData(myLoan.duration,myLoan.amount,myLoan.rate,LBound,RBound,false,-1,-1);
          annuityLoan.setLoanData(myLoan.duration,myLoan.amount,myLoan.rate,LBound,RBound,false,-1,-1);
        }
        else
        {
          linearLoan.setLoanData(myLoan.duration,myLoan.amount,myLoan.rate,LBound,RBound,true,max((int)delayInput.getRange()[0],1),max((int)delayInput.getRange()[1],1));
          annuityLoan.setLoanData(myLoan.duration,myLoan.amount,myLoan.rate,LBound,RBound,true,max((int)delayInput.getRange()[0],1),max((int)delayInput.getRange()[1],1));
        }
      }
      else if(boundedL)
      {
        if(delaying==false)
        {
          linearLoan.setLoanData(myLoan.duration,myLoan.amount,myLoan.rate,LBound,-1,false,-1,-1);
          annuityLoan.setLoanData(myLoan.duration,myLoan.amount,myLoan.rate,LBound,-1,false,-1,-1);
        }
        else
        {
          linearLoan.setLoanData(myLoan.duration,myLoan.amount,myLoan.rate,LBound,-1,true,max((int)delayInput.getRange()[0],1),max((int)delayInput.getRange()[1],1));
          annuityLoan.setLoanData(myLoan.duration,myLoan.amount,myLoan.rate,LBound,-1,true,max((int)delayInput.getRange()[0],1),max((int)delayInput.getRange()[1],1));
        }
      }
      else if(boundedR)
      {
        if(delaying==false)
        {
          linearLoan.setLoanData(myLoan.duration,myLoan.amount,myLoan.rate,-1,RBound,false,-1,-1);
          annuityLoan.setLoanData(myLoan.duration,myLoan.amount,myLoan.rate,-1,RBound,false,-1,-1);
        }
        else
        {
          linearLoan.setLoanData(myLoan.duration,myLoan.amount,myLoan.rate,-1,RBound,true,max((int)delayInput.getRange()[0],1),max((int)delayInput.getRange()[1],1));
          annuityLoan.setLoanData(myLoan.duration,myLoan.amount,myLoan.rate,-1,RBound,true,max((int)delayInput.getRange()[0],1),max((int)delayInput.getRange()[1],1));
        }
      }
      else
      {
        if(delaying==false)
        {
          linearLoan.setLoanData(myLoan.duration,myLoan.amount,myLoan.rate,-1,-1,false,-1,-1);
          annuityLoan.setLoanData(myLoan.duration,myLoan.amount,myLoan.rate,-1,-1,false,-1,-1);
        }
        else
        {
          linearLoan.setLoanData(myLoan.duration,myLoan.amount,myLoan.rate,-1,-1,true,max((int)delayInput.getRange()[0],1),max((int)delayInput.getRange()[1],1));
          annuityLoan.setLoanData(myLoan.duration,myLoan.amount,myLoan.rate,-1,-1,true,max((int)delayInput.getRange()[0],1),max((int)delayInput.getRange()[1],1));
        }
      }
      if(plotting)
      {
        //System.out.println("What?");
        plotting=false;
        if(loanChoice.pressedButton()==0)
        {
          annuityLoan.setActive(true);
          linearLoan.setActive(false);
          myPlotTable.setActive(false);
        }
        else
        {
          annuityLoan.setActive(false);
          linearLoan.setActive(true);
          myPlotTable.setActive(false);
        }
      }
      else if(tabular)
      {
        tabular=false;
        annuityLoan.setActive(false);
        linearLoan.setActive(false);
        myPlotTable.setActive(false);
        if(loanChoice.pressedButton()==0)
        {
          String[] tempLabels  = {"Time (months)","Total","Principal","Interest","Left to pay"};
          myPlotTable = new PlotTable(annuityLoan,320*SCALE,40*SCALE,160*SCALE,160*SCALE,tempLabels);
          output = new StringTable(myPlotTable);
        }
        else
        {
          String[] tempLabels  = {"Time (months)","Total","Principal","Interest","Left to pay"};
          myPlotTable = new PlotTable(linearLoan,320*SCALE,40*SCALE,160*SCALE,160*SCALE,tempLabels);
          output = new StringTable(myPlotTable);
        }
      }
    }
    if(unshowing)
    {
      unshowing = false;
      annuityLoan.setActive(false);
      linearLoan.setActive(false);
      myPlotTable.setActive(false);
    }
  }
  /////////////////////// #Debug2 //////////////////////////
  public void doDebug()
  {
    System.out.println("Debug Results:");
    /*System.out.println(linearLoan.stepX);
    System.out.println(linearLoan.scalingFX);
    System.out.println(yearsInput.displayText.realW);
    System.out.println(linearLoan.dataPoints.get(0).get(2).xFloat);
    System.out.println(linearLoan.xAxis.get(2).x);*/
    System.out.println("");
  }
  /////////////////////// #Input //////////////////////////
  public void keyReleased()
  {
    if(key==CODED)
    {
      lastKeyReleased=keyCode;
    }
    else
    {
      lastKeyReleased=key;
    }
    haveReleasedKey=true;
  }
  public static void main(String[] args)
  {
    PApplet.main("economics");
  }
  //(-yAxisStep.width/8)-(p1.label.realW)
}

